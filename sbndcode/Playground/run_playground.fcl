#include "simulationservices_sbnd.fcl"
#include "playground.fcl"

process_name: Playground

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "playground_sbnd.root" }
  # TimeTracker:         {}
  # MemoryTracker:       {} # default is one
  # RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::sbnd_g4_services
}

#Start each new event with an empty event.
source:
{
  module_type: RootInput
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 analyzers:
 {
   playground:     @local::playground
   # rns:       { module_type: "RandomNumberSaver" }
 }

 ana: [ playground ]

 #define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event,
 #ie filters and producers
 trigger_paths: []

 #end_paths is a keyword and contains the paths that do not modify the art::Event,
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ana, stream1]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "out-art.root"
   dataTier:    "generated"
   compressionLevel: 1
 }
}


